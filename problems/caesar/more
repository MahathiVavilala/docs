:stem:

= Caesar

== tl;dr
 
. TODO
. TODO
. TODO
. TODO

== Background

Supposedly, Caesar (yes, that Caesar) used to "encrypt" (i.e., conceal in a reversible way) confidential messages by shifting each letter therein by some number of places. For instance, he might write A as B, B as C, C as D, ..., and, wrapping around alphabetically, Z as A. Upon receiving such messages from Caesar, recipients would have to "decrypt" them by shifting letters in the opposite direction by the same number of places. For instance, to say HELLO to someone, Caesar might write IFMMP.

The secrecy of this "cryptosystem" relied on only Caesar and the recipients knowing that every letter was shifted by some number of places (e.g., 1). Not particularly secure by modern standards, but, hey, if you're perhaps the first in the world to do it, pretty secure!






Put another way, Caesar's algorithm (i.e., cipher) encrypts messages by "rotating" each letter by _k_ positions. More formally, if _p_ is some plaintext (i.e., an unencrypted message), _p~i~_ is the _i^th^_ character in _p_, and _k_ is a secret key (i.e., a non-negative integer), then each letter, _c~i~_, in the ciphertext, _c_, is computed as

[stem]
++++
c_i = (p_i + k) % 26
++++

wherein % 26 (pronounced "modulo 26") means "remainder when dividing by 26." This formula perhaps makes the cipher seem more complicated than it is, but it's really just a nice way of expressing the algorithm precisely and concisely. And computer scientists love precision and, er, concision. 

Prefer an example? Okay, sure. For the sake of discussion, think of A as 0, B as 1, and Z as 25. Suppose that Caesar wants to say HI to someone secretly using his usual key, _k_, of 3. And so _p_ is HI, in which case _p~0~_ is H (aka 7) and _p~1~_ is I (aka 8). Meanwhile,

[stem]
++++
c_0 = (p_0 + k) % 26 = (H + 3) % 26 = (7 + 3) % 26 = 10 % 26 = 10 = K
++++

since the remainder when dividing 10 by 26 is 10 (aka K) and

[stem]
++++
c_1 = (p_1 + k) % 26 = (I + 3) % 26 = (8 + 3) % 26 = 11 % 26 = 10 = L
++++

since the remainder when dividing 11 by 26 is 11 (aka L).

And so Caesar would send KL instead of HI. 



Incidentally, a Caesar cipher with a key of 13 is generally called ROT13 (cf. http://en.wikipedia.org/wiki/ROT13). Don't use http://www.urbandictionary.com/define.php?term=ROT26[ROT26].

Anyhow, your next goal is to write, in `caesar.c`, a program that encrypts messages using Caesar's cipher. 

* Your program must accept a single command-line argument, a non-negative integer. Let's call it _k_ for the sake of discussion.
* If your program is executed without any command-line arguments or with more than one command-line argument, your program should print an error message (of your choice) and return (from `main`) a value of `1` (which tends to signify an error) immediately.
* You can assume that the command-line argument that the user provides will be entirely numeric (e.g., `13` and not `foo`).
* Otherwise, your program must proceed to prompt the user for a string of plaintext and then output that text with each alphabetical character "rotated" by _k_ positions; non-alphabetical characters should be outputted unchanged.
* Your program must preserve case: capitalized letters, though rotated, must remain capitalized letters; lowercase letters, though rotated, must remain lowercase letters.
* After outputting ciphertext, your program should exit by returning `0` from `main`.

Recall that, if you don't explicitly return an `int` from within `main`, `0` is actually returned for you automatically. (Indeed, per its "return type," `main` does need to return an `int`.) Now that you're returning `1` explicitly to signify errors, it's best to return `0` (by convention) explicitly to signify success. Whereas `0` generally represents success, any non-`0` `int` generally represents an error. That way, you can represent (gasp) upwards of four billion errors (since an `int` is generally 32 bits)!

Anyhow, even though there exist only 26 letters in the English alphabet, you may not assume that _k_ will be less than or equal to 26; your program should work for all non-negative integral values of _k_ less than 2^31^ - 26. In other words, you don't need to worry if your program eventually breaks if the user chooses a value for _k_ that's too big or almost too big to fit in an `int`. (Recall that an `int` can overflow.) But, even if _k_ is greater than 26, alphabetical characters in your program's input should remain alphabetical characters in your program's output. For instance, if _k_ is 27, `A` should not become `[` even though `[` is 27 positions away from `A` in ASCII, per http://www.asciichart.com/[asciichart.com]; `A` should become `B`, since "27 modulo 26" is 1, as a computer scientists might say. In other words, values like _k_ = 1 and _k_ = 27 are effectively equivalent. Put more simply, be sure to wrap around from `Z` to `A` (and from `z` to `a`).

Where to begin?  Well, this program needs to accept a command-line argument, _k_, so this time you'll want to declare `main` with:

[source,c]
----
int main(int argc, string argv[])
----

Recall that `argv` is an "array" of ++string++s. You can think of an array as row of gym lockers, inside each of which is some value (and maybe some socks). In this case, inside each such locker is a `string`. To open (i.e., "index into") the first locker, you use syntax like `argv[0]`, since arrays are "zero-indexed." To open the next locker, you use syntax like `argv[1]`. And so on. Of course, if there are `n` lockers, you'd better stop opening lockers once you get to `argv[n - 1]`, since `argv[n]` doesn't exist!  (That or it belongs to someone else, in which case you still shouldn't open it.)  

And so you can access _k_ with code like

[source,c]
----
string k = argv[1];
----

assuming it's actually there! Recall that `argc` is an `int` that equals the number of strings that are in `argv`, so you'd best check the value of `argc` before opening a locker that might not exist!  Ideally, `argc` will be `2`. Why? Well, recall that inside of `argv[0]`, by default, is a program's own name. So `argc` will always be at least `1`. But for this program you want the user to provide a command-line argument, `k`, in which case `argc` should be `2`. Of course, if the user provides more than one command-line argument at the prompt, `argc` could be greater than `2`, in which case, again, your program should print an error and return `1`.

Now, just because the user types an integer at the prompt, that doesn't mean their input will be automatically stored in an `int`. Au contraire, it will be stored as a `string` that just so happens to look like an `int`!  And so you'll need to convert that `string` to an actual `int`. As luck would have it, a function, https://reference.cs50.net/stdlib/atoi[`atoi`], exists for exactly that purposes. Here's how you might use it:

[source,c]
----
int k = atoi(argv[1]);
----

Notice, this time, we've declared `k` as an actual `int` so that you can actually do some arithmetic with it. 

Because `atoi` is declared in `stdlib.h`, you'll want to `#include` that header file atop your own code. (Technically, your code will compile without it there, since we already `#include` it in `cs50.h`. But best not to trust another library to `#include` header files you know you need.)

Okay, so once you've got `k` stored as an `int`, you'll need to ask the user for some plaintext. Odds are CS50's own `get_string` can help you with that.

Once you have both `k` and some plaintext, it's time to encrypt the latter with the former. Recall that you can iterate over the characters in a `string`, printing each one at a time, with code like the below:

[source,c]
----
for (int i = 0, n = strlen(p); i < n; i++)
{
    printf("%c", p[i]);
}
----

In other words, just as `argv` is an array of ++string++s, so is a `string` an array of ++char++s. And so you can use square brackets to access individual characters in ++string++s just as you can individual ++string++s in `argv`. Neat, eh?  Of course, printing each of the characters in a string one at a time isn't exactly cryptography. Well, maybe technically if _k_ is 0. But the above should help you help Caesar implement his cipher! For Caesar!

Incidentally, you'll need to `#include` yet another header file in order to use https://reference.cs50.net/string/strlen[`strlen`]. 

So that we can automate some tests of your code, your program must behave per the below. Assumed that the underlined text is what some user has typed.

[source,subs=quotes]
----
~/workspace/pset2 $ [underline]#./caesar 13#
[underline]#Be sure to drink your Ovaltine!#
Or fher gb qevax lbhe Binygvar!
----

Besides `atoi`, you might find some handy functions documented at https://reference.cs50.net/ under *ctype.h* and *stdlib.h*. For instance, `isdigit` sounds interesting. And, with regard to wrapping around from `Z` to `A` (or `z` to `a`), don't forget about `%`, C's modulo operator. You might also want to check out http://asciitable.com/, which reveals the ASCII codes for more than just alphabetical characters, just in case you find yourself printing some characters accidentally.

If you'd like to check the correctness of your program with `check50`, you may execute the below.

[source,bash]
----
check50 2016.caesar caesar.c
----

And if you'd like to play with the staff's own implementation of `caesar`, you may execute the below.

[source,bash]
----
~cs50/pset2/caesar
----

Here's Zamyla if you'd like a walkthrough as well:

video::TODO[youtube,height=540,width=960]

== CHANGELOG

* 2016-09-08
** Initial release.
